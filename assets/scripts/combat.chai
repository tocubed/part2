global arena_loc = Location(1000, 1000);

global saved_locations;
global saved_facing;

global combat_enemy;
global combat_enemy_loc;

global enemy_action;

global enemy_health;
global follower_healths;

def teleport_to_arena()
{
	saved_locations = EntityLocationMap();
	saved_facing = EntityDirectionMap();

	saved_locations[player] = location(player);
	saved_facing[player] = facing(player);

	var arena_ctr = Location(arena_loc.x + 15, arena_loc.y + 15);

	combat_enemy_loc = Location(arena_ctr.x, arena_ctr.y - 4);

	saved_locations[combat_enemy] = location(combat_enemy);
	saved_facing[combat_enemy] = facing(combat_enemy);
	script.teleport(combat_enemy, combat_enemy_loc);
	script.face(combat_enemy, DOWN);

	script.teleport(player, Location(arena_ctr.x, arena_ctr.y));
	script.face(player, UP);

	var followers = range(followers(player));
	var follower_count = 0;

	for(follower: followers)
	{
		follower_count += 1;

		saved_locations[follower] = location(follower);
		saved_facing[follower] = facing(follower);

		var follower_loc = Location(arena_ctr.x - 4, arena_ctr.y + 1);
		follower_loc.x += (2 * follower_count - 1) % 9;
		follower_loc.y += (2 * follower_count - 1) / 9;

		script.teleport(follower, follower_loc);
		script.face(follower, UP);
	}
}

global follower_choices;
global follower_actions;

global index_to_follower;

def follower_to_index(Entity f)
{
	var follower = Entity(f);

	for(var i = 0; i < index_to_follower.size(); ++i)
	{
		if(index_to_follower[i] == f)
		{
			return i;
		}
	}
}

def combat_end()
{
	return enemy_health <= 0 || follower_healths.size() == 0;
}

def kill_follower(int i)
{
	follower_choices.erase(i);
	follower_actions.erase(i);

	follower_healths.erase(i);

	index_to_followers.erase(i);
	
	// DELETE THE FOLLOWER FOR REAL
}

def check_if_followers_died()
{
	var to_be_killed = [];

	for(var i = 0; i < follower_healths.size(); ++i)
	{
		if(follower_healths[i] <= 0)
		{
			to_be_killed.push_back(i);
		}
	}

	for(follower_i: to_be_killed)
	{
		kill_follower(follower_i);
	}
}

def combat_loop()
{
	check_if_followers_died();

	prompt("Which follower will you call on?", follower_choices, follower_actions);
}

global attacking;
global resume_combat;

def make_follower_action(Entity f)
{
	var follower = Entity(f);

	var action = fun[follower]()
	{
		me = follower;
		attacking = combat_enemy;

		resume_combat = fun[follower]() {
			if(combat_end())
			{
				end_combat();
			}
			else
			{
				me = combat_enemy;
				attacking = follower;

				resume_combat = fun()
				{
					combat_loop();
				};

				enemy_action();
			}
		};

		eval(get_script(follower, "OnCombat"));
	};

	return action;
}

def init_enemy()
{
	enemy_health = 100;

	enemy_action = fun()
	{
		eval(get_script(combat_enemy, "OnCombat"));
	};
}

def init_followers()
{
	follower_choices = [];
	follower_actions = [];

	follower_healths = [];

	index_to_follower = [];

	var followers = range(followers(player));
	for(follower: followers)
	{
		follower_choices.push_back(name(follower));
		follower_actions.push_back(make_follower_action(follower));
		
		follower_healths.push_back(100);

		index_to_follower.push_back(follower);
	}
}

def end_combat()
{
	fade(true, fun()
	{
		freeze_player(false);

		fade(false);

		script.teleport(combat_enemy, saved_locations[combat_enemy]);
		script.face(combat_enemy, saved_facing[combat_enemy]);

		script.teleport(player, saved_locations[player]);
		script.face(player, saved_facing[player]);

		var followers = range(followers(player));
		for(follower: followers)
		{
			script.teleport(follower, saved_locations[follower]);
			script.face(follower, saved_facing[follower]);
		}

		script.unload_map(arena_loc);
	});
}

def do_combat(string arena, Entity enemy)
{
	combat_enemy = enemy;

	script.load_map("assets/maps/arenas/"+arena+".tmx", arena_loc);

	freeze_player(true);

	fade(true, fun()
	{
		fade(false);

		teleport_to_arena();
		init_enemy();
		init_followers();

		combat_loop();
	});
}

// Stuff that can be used by OnCombat
global me;

def damage(Entity e, int damage)
{
	if(e == combat_enemy)
	{
		enemy_health -= damage;
	}
	else
	{
		var index = follower_to_index(e);

		followers_health[index] -= damage;
	}
}

def walk_to_attack_location(Entity e, Function callback)
{
	if(e == combat_enemy)
	{
		script.face(e, DOWN);
		callback();
	}
	else
	{
		var loc_in_line = location(e);

		walk_to(e, Location(combat_enemy_loc.x, combat_enemy_loc.y + 1), 
		fun()
		{
			script.face(e, UP);
			callback();
		});
	}
}
